=begin
#Mooncard API

#Access Mooncard data from anywhere

OpenAPI spec version: 3.0.0
Contact: hello@mooncard.co
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module Mooncard
  class CardsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def find(id, opts = {})
      data, _status_code, _headers = find_with_http_info(id, opts)
      data
    end

    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def find_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.find ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardsApi.find"
      end
      # resource path
      local_var_path = '/api/v3/cards/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page.
    # @option opts [String] :card_search_name_cont name LIKE %?%
    # @option opts [String] :card_search_token_eq token &#x3D; ?
    # @option opts [String] :card_search_pattern_id_eq pattern_id &#x3D; ?
    # @option opts [String] :card_search_user_profile_id_eq user_profile_id &#x3D; ?
    # @option opts [String] :card_search_status_eq status &#x3D; ?
    # @option opts [String] :card_search_order_by Select which field you want to order the results by
    # @option opts [String] :card_search_order Select whether the results should be sorted in ascending or descending order
    # @return [Array<Card>]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @option opts [String] :card_search_name_cont name LIKE %?%
    # @option opts [String] :card_search_token_eq token &#x3D; ?
    # @option opts [String] :card_search_pattern_id_eq pattern_id &#x3D; ?
    # @option opts [String] :card_search_user_profile_id_eq user_profile_id &#x3D; ?
    # @option opts [String] :card_search_status_eq status &#x3D; ?
    # @option opts [String] :card_search_order_by Select which field you want to order the results by
    # @option opts [String] :card_search_order Select whether the results should be sorted in ascending or descending order
    # @return [Array<(Array<Card>, Fixnum, Hash)>] Array<Card> data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.list ...'
      end
      if @api_client.config.client_side_validation && opts[:'card_search_status_eq'] && !['available', 'assigned', 'activated', 'deprecated'].include?(opts[:'card_search_status_eq'])
        fail ArgumentError, 'invalid value for "card_search_status_eq", must be one of available, assigned, activated, deprecated'
      end
      if @api_client.config.client_side_validation && opts[:'card_search_order_by'] && !['activated_at', 'assigned_at', 'created_at', 'deprecated_at', 'expiration_date', 'updated_at'].include?(opts[:'card_search_order_by'])
        fail ArgumentError, 'invalid value for "card_search_order_by", must be one of activated_at, assigned_at, created_at, deprecated_at, expiration_date, updated_at'
      end
      if @api_client.config.client_side_validation && opts[:'card_search_order'] && !['asc', 'desc'].include?(opts[:'card_search_order'])
        fail ArgumentError, 'invalid value for "card_search_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v3/cards'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'card_search[name_cont]'] = opts[:'card_search_name_cont'] if !opts[:'card_search_name_cont'].nil?
      query_params[:'card_search[token_eq]'] = opts[:'card_search_token_eq'] if !opts[:'card_search_token_eq'].nil?
      query_params[:'card_search[pattern_id_eq]'] = opts[:'card_search_pattern_id_eq'] if !opts[:'card_search_pattern_id_eq'].nil?
      query_params[:'card_search[user_profile_id_eq]'] = opts[:'card_search_user_profile_id_eq'] if !opts[:'card_search_user_profile_id_eq'].nil?
      query_params[:'card_search[status_eq]'] = opts[:'card_search_status_eq'] if !opts[:'card_search_status_eq'].nil?
      query_params[:'card_search[order_by]'] = opts[:'card_search_order_by'] if !opts[:'card_search_order_by'].nil?
      query_params[:'card_search[order]'] = opts[:'card_search_order'] if !opts[:'card_search_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Card>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id 
    # @param card 
    # @param [Hash] opts the optional parameters
    # @return [Card]
    def update(id, card, opts = {})
      data, _status_code, _headers = update_with_http_info(id, card, opts)
      data
    end

    # @param id 
    # @param card 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Card, Fixnum, Hash)>] Card data, response status code and response headers
    def update_with_http_info(id, card, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CardsApi.update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CardsApi.update"
      end
      # verify the required parameter 'card' is set
      if @api_client.config.client_side_validation && card.nil?
        fail ArgumentError, "Missing the required parameter 'card' when calling CardsApi.update"
      end
      # resource path
      local_var_path = '/api/v3/cards/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(card)
      form_params = { 'card' => JSON.parse(post_body).except('id') }
      # post_body = nil


      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, :header_params => header_params, :query_params => query_params,:form_params => form_params, :body => post_body, :auth_names => auth_names, :return_type => 'Card')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CardsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
