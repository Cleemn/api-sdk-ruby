=begin
#Mooncard API

#Access Mooncard data from anywhere

OpenAPI spec version: 3.0.0
Contact: damien@mooncard.co
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Mooncard
  class PostApiV3UserProfilesUserProfile
    attr_accessor :position

    # Array of user_profile_id
    attr_accessor :direct_manager_ids

    # Allow access to the interface
    attr_accessor :active

    # Use for analytical accounting
    attr_accessor :analytic_code

    # Your unique code for the employee
    attr_accessor :code

    # Employee account use for personal expense to refund or for an accountability in an expenses report journal / miscellaneous
    attr_accessor :accounting_employee_account

    # If you want to dedicate a charge account for each employee
    attr_accessor :accounting_charge_account

    # Is it activated for the employee (required for admins)
    attr_accessor :two_factor_active

    # Determine which journal to use when you have 2 journals (purchasing and Miscellaneous)
    attr_accessor :expense_type

    attr_accessor :status

    attr_accessor :auto_check_rebilling

    attr_accessor :use_km_expenses

    attr_accessor :use_manual_expenses

    attr_accessor :email

    attr_accessor :firstname

    attr_accessor :lastname

    attr_accessor :role

    attr_accessor :phone

    attr_accessor :address

    attr_accessor :birthdate

    attr_accessor :locale

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'position' => :'position',
        :'direct_manager_ids' => :'direct_manager_ids',
        :'active' => :'active',
        :'analytic_code' => :'analytic_code',
        :'code' => :'code',
        :'accounting_employee_account' => :'accounting_employee_account',
        :'accounting_charge_account' => :'accounting_charge_account',
        :'two_factor_active' => :'two_factor_active',
        :'expense_type' => :'expense_type',
        :'status' => :'status',
        :'auto_check_rebilling' => :'auto_check_rebilling',
        :'use_km_expenses' => :'use_km_expenses',
        :'use_manual_expenses' => :'use_manual_expenses',
        :'email' => :'email',
        :'firstname' => :'firstname',
        :'lastname' => :'lastname',
        :'role' => :'role',
        :'phone' => :'phone',
        :'address' => :'address',
        :'birthdate' => :'birthdate',
        :'locale' => :'locale'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'position' => :'String',
        :'direct_manager_ids' => :'Array<String>',
        :'active' => :'BOOLEAN',
        :'analytic_code' => :'String',
        :'code' => :'String',
        :'accounting_employee_account' => :'String',
        :'accounting_charge_account' => :'String',
        :'two_factor_active' => :'BOOLEAN',
        :'expense_type' => :'String',
        :'status' => :'String',
        :'auto_check_rebilling' => :'BOOLEAN',
        :'use_km_expenses' => :'BOOLEAN',
        :'use_manual_expenses' => :'BOOLEAN',
        :'email' => :'String',
        :'firstname' => :'String',
        :'lastname' => :'String',
        :'role' => :'String',
        :'phone' => :'String',
        :'address' => :'String',
        :'birthdate' => :'String',
        :'locale' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'position')
        self.position = attributes[:'position']
      end

      if attributes.has_key?(:'direct_manager_ids')
        if (value = attributes[:'direct_manager_ids']).is_a?(Array)
          self.direct_manager_ids = value
        end
      end

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'analytic_code')
        self.analytic_code = attributes[:'analytic_code']
      end

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'accounting_employee_account')
        self.accounting_employee_account = attributes[:'accounting_employee_account']
      end

      if attributes.has_key?(:'accounting_charge_account')
        self.accounting_charge_account = attributes[:'accounting_charge_account']
      end

      if attributes.has_key?(:'two_factor_active')
        self.two_factor_active = attributes[:'two_factor_active']
      end

      if attributes.has_key?(:'expense_type')
        self.expense_type = attributes[:'expense_type']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'auto_check_rebilling')
        self.auto_check_rebilling = attributes[:'auto_check_rebilling']
      end

      if attributes.has_key?(:'use_km_expenses')
        self.use_km_expenses = attributes[:'use_km_expenses']
      end

      if attributes.has_key?(:'use_manual_expenses')
        self.use_manual_expenses = attributes[:'use_manual_expenses']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.has_key?(:'lastname')
        self.lastname = attributes[:'lastname']
      end

      if attributes.has_key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.has_key?(:'birthdate')
        self.birthdate = attributes[:'birthdate']
      end

      if attributes.has_key?(:'locale')
        self.locale = attributes[:'locale']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @firstname.nil?
        invalid_properties.push('invalid value for "firstname", firstname cannot be nil.')
      end

      if @lastname.nil?
        invalid_properties.push('invalid value for "lastname", lastname cannot be nil.')
      end

      if @role.nil?
        invalid_properties.push('invalid value for "role", role cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      expense_type_validator = EnumAttributeValidator.new('String', ['professional_expense', 'personal_expense'])
      return false unless expense_type_validator.valid?(@expense_type)
      status_validator = EnumAttributeValidator.new('String', ['archived', 'not_confirmed', 'enabled', 'disabled'])
      return false unless status_validator.valid?(@status)
      return false if @email.nil?
      return false if @firstname.nil?
      return false if @lastname.nil?
      return false if @role.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expense_type Object to be assigned
    def expense_type=(expense_type)
      validator = EnumAttributeValidator.new('String', ['professional_expense', 'personal_expense'])
      unless validator.valid?(expense_type)
        fail ArgumentError, 'invalid value for "expense_type", must be one of #{validator.allowable_values}.'
      end
      @expense_type = expense_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ['archived', 'not_confirmed', 'enabled', 'disabled'])
      unless validator.valid?(status)
        fail ArgumentError, 'invalid value for "status", must be one of #{validator.allowable_values}.'
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          position == o.position &&
          direct_manager_ids == o.direct_manager_ids &&
          active == o.active &&
          analytic_code == o.analytic_code &&
          code == o.code &&
          accounting_employee_account == o.accounting_employee_account &&
          accounting_charge_account == o.accounting_charge_account &&
          two_factor_active == o.two_factor_active &&
          expense_type == o.expense_type &&
          status == o.status &&
          auto_check_rebilling == o.auto_check_rebilling &&
          use_km_expenses == o.use_km_expenses &&
          use_manual_expenses == o.use_manual_expenses &&
          email == o.email &&
          firstname == o.firstname &&
          lastname == o.lastname &&
          role == o.role &&
          phone == o.phone &&
          address == o.address &&
          birthdate == o.birthdate &&
          locale == o.locale
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [position, direct_manager_ids, active, analytic_code, code, accounting_employee_account, accounting_charge_account, two_factor_active, expense_type, status, auto_check_rebilling, use_km_expenses, use_manual_expenses, email, firstname, lastname, role, phone, address, birthdate, locale].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Mooncard.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
