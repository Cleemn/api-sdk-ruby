=begin
#Mooncard API

#Access Mooncard data from anywhere

OpenAPI spec version: 3.0.0
Contact: damien@mooncard.co
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Mooncard
  class ExpenseCategory
    attr_accessor :id

    # Displays the analytic codes field in the expense form
    attr_accessor :analytic_codes

    # The expense VAT will be accounted as an asset
    attr_accessor :asset_accounting

    # Displays the business code field in the expense form
    attr_accessor :business_codes

    # Uses this account when accounting the charge
    attr_accessor :charge_account

    attr_accessor :created_at

    # Percentage of the deductibility for the VAT (0-100)
    attr_accessor :deductible_vat

    # Will be displayed under the name in the expense form
    attr_accessor :description

    # Choose the most appropriate template among the following list
    attr_accessor :expense_category_template

    # Choose the most appropriate expense type among the following list
    attr_accessor :expense_type

    # Choose whether this expense category concerns \"goods\" or \"services\"
    attr_accessor :goods_or_services

    # Groups the expense category with others within the same group
    attr_accessor :group

    # Displays the attendees field in the expense form
    attr_accessor :guests

    # Unique name displayed in the dropdown menu in the expense form
    attr_accessor :name

    # This expense category does not require a receipt (e.g. mileage)
    attr_accessor :no_receipts

    # Allows rebilling for any expenses associated to the expense category
    attr_accessor :rebilling

    # Forces the expenses associated with the expense category to be accounting in this supplier account (according to your configuration)
    attr_accessor :supplier_account

    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'analytic_codes' => :'analytic_codes',
        :'asset_accounting' => :'asset_accounting',
        :'business_codes' => :'business_codes',
        :'charge_account' => :'charge_account',
        :'created_at' => :'created_at',
        :'deductible_vat' => :'deductible_vat',
        :'description' => :'description',
        :'expense_category_template' => :'expense_category_template',
        :'expense_type' => :'expense_type',
        :'goods_or_services' => :'goods_or_services',
        :'group' => :'group',
        :'guests' => :'guests',
        :'name' => :'name',
        :'no_receipts' => :'no_receipts',
        :'rebilling' => :'rebilling',
        :'supplier_account' => :'supplier_account',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'analytic_codes' => :'BOOLEAN',
        :'asset_accounting' => :'BOOLEAN',
        :'business_codes' => :'BOOLEAN',
        :'charge_account' => :'String',
        :'created_at' => :'DateTime',
        :'deductible_vat' => :'Integer',
        :'description' => :'String',
        :'expense_category_template' => :'String',
        :'expense_type' => :'String',
        :'goods_or_services' => :'String',
        :'group' => :'String',
        :'guests' => :'BOOLEAN',
        :'name' => :'String',
        :'no_receipts' => :'BOOLEAN',
        :'rebilling' => :'BOOLEAN',
        :'supplier_account' => :'String',
        :'updated_at' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'analytic_codes')
        self.analytic_codes = attributes[:'analytic_codes']
      end

      if attributes.has_key?(:'asset_accounting')
        self.asset_accounting = attributes[:'asset_accounting']
      end

      if attributes.has_key?(:'business_codes')
        self.business_codes = attributes[:'business_codes']
      end

      if attributes.has_key?(:'charge_account')
        self.charge_account = attributes[:'charge_account']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'deductible_vat')
        self.deductible_vat = attributes[:'deductible_vat']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'expense_category_template')
        self.expense_category_template = attributes[:'expense_category_template']
      end

      if attributes.has_key?(:'expense_type')
        self.expense_type = attributes[:'expense_type']
      end

      if attributes.has_key?(:'goods_or_services')
        self.goods_or_services = attributes[:'goods_or_services']
      end

      if attributes.has_key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.has_key?(:'guests')
        self.guests = attributes[:'guests']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'no_receipts')
        self.no_receipts = attributes[:'no_receipts']
      end

      if attributes.has_key?(:'rebilling')
        self.rebilling = attributes[:'rebilling']
      end

      if attributes.has_key?(:'supplier_account')
        self.supplier_account = attributes[:'supplier_account']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      expense_category_template_validator = EnumAttributeValidator.new('String', ['template_legal', 'template_stamps', 'template_transport', 'template_office_supplies', 'template_cleaning_supplies', 'template_books', 'template_forums', 'template_gifts', 'template_small_equipments', 'template_expensive_equipments', 'template_cash', 'template_internet_subscriptions', 'template_internet_ads', 'template_software', 'template_hotels', 'template_rent', 'template_internal_meals', 'template_food', 'template_external_meals', 'template_car_rental', 'template_fuel', 'template_parking', 'template_toll', 'template_taxi', 'template_train', 'template_flight', 'template_vehicle_repairs', 'template_km_expenses', 'template_personal_expenses'])
      return false unless expense_category_template_validator.valid?(@expense_category_template)
      expense_type_validator = EnumAttributeValidator.new('String', ['professional_expense', 'personal_expense'])
      return false unless expense_type_validator.valid?(@expense_type)
      goods_or_services_validator = EnumAttributeValidator.new('String', ['goods', 'services'])
      return false unless goods_or_services_validator.valid?(@goods_or_services)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expense_category_template Object to be assigned
    def expense_category_template=(expense_category_template)
      validator = EnumAttributeValidator.new('String', ['template_legal', 'template_stamps', 'template_transport', 'template_office_supplies', 'template_cleaning_supplies', 'template_books', 'template_forums', 'template_gifts', 'template_small_equipments', 'template_expensive_equipments', 'template_cash', 'template_internet_subscriptions', 'template_internet_ads', 'template_software', 'template_hotels', 'template_rent', 'template_internal_meals', 'template_food', 'template_external_meals', 'template_car_rental', 'template_fuel', 'template_parking', 'template_toll', 'template_taxi', 'template_train', 'template_flight', 'template_vehicle_repairs', 'template_km_expenses', 'template_personal_expenses'])
      unless validator.valid?(expense_category_template)
        fail ArgumentError, 'invalid value for "expense_category_template", must be one of #{validator.allowable_values}.'
      end
      @expense_category_template = expense_category_template
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expense_type Object to be assigned
    def expense_type=(expense_type)
      validator = EnumAttributeValidator.new('String', ['professional_expense', 'personal_expense'])
      unless validator.valid?(expense_type)
        fail ArgumentError, 'invalid value for "expense_type", must be one of #{validator.allowable_values}.'
      end
      @expense_type = expense_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] goods_or_services Object to be assigned
    def goods_or_services=(goods_or_services)
      validator = EnumAttributeValidator.new('String', ['goods', 'services'])
      unless validator.valid?(goods_or_services)
        fail ArgumentError, 'invalid value for "goods_or_services", must be one of #{validator.allowable_values}.'
      end
      @goods_or_services = goods_or_services
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          analytic_codes == o.analytic_codes &&
          asset_accounting == o.asset_accounting &&
          business_codes == o.business_codes &&
          charge_account == o.charge_account &&
          created_at == o.created_at &&
          deductible_vat == o.deductible_vat &&
          description == o.description &&
          expense_category_template == o.expense_category_template &&
          expense_type == o.expense_type &&
          goods_or_services == o.goods_or_services &&
          group == o.group &&
          guests == o.guests &&
          name == o.name &&
          no_receipts == o.no_receipts &&
          rebilling == o.rebilling &&
          supplier_account == o.supplier_account &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, analytic_codes, asset_accounting, business_codes, charge_account, created_at, deductible_vat, description, expense_category_template, expense_type, goods_or_services, group, guests, name, no_receipts, rebilling, supplier_account, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Mooncard.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
