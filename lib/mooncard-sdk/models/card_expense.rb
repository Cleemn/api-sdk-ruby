=begin
#Mooncard API

#Access Mooncard data from anywhere

OpenAPI spec version: 3.0.0
Contact: hello@mooncard.co
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'date'

module Mooncard
  class CardExpense
    attr_accessor :mastercard_merchant_id

    # ISO code alpha 3 for country of the payment service provider
    attr_accessor :location

    # MCC (ISO 18245)
    attr_accessor :merchant_category_code

    # Token matching the card
    attr_accessor :token

    # Mastercard Trans_link
    attr_accessor :transaction_link

    # Mastercard Txn_Stat_Code
    attr_accessor :transaction_status

    # Mastercard Txn_Type
    attr_accessor :transaction_type

    # The date and time of the debit
    attr_accessor :debited_at

    attr_accessor :pos

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'mastercard_merchant_id' => :'mastercard_merchant_id',
        :'location' => :'location',
        :'merchant_category_code' => :'merchant_category_code',
        :'token' => :'token',
        :'transaction_link' => :'transaction_link',
        :'transaction_status' => :'transaction_status',
        :'transaction_type' => :'transaction_type',
        :'debited_at' => :'debited_at',
        :'pos' => :'pos'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'mastercard_merchant_id' => :'String',
        :'location' => :'String',
        :'merchant_category_code' => :'String',
        :'token' => :'Integer',
        :'transaction_link' => :'Integer',
        :'transaction_status' => :'String',
        :'transaction_type' => :'String',
        :'debited_at' => :'DateTime',
        :'pos' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'mastercard_merchant_id')
        self.mastercard_merchant_id = attributes[:'mastercard_merchant_id']
      end

      if attributes.has_key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.has_key?(:'merchant_category_code')
        self.merchant_category_code = attributes[:'merchant_category_code']
      end

      if attributes.has_key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.has_key?(:'transaction_link')
        self.transaction_link = attributes[:'transaction_link']
      end

      if attributes.has_key?(:'transaction_status')
        self.transaction_status = attributes[:'transaction_status']
      end

      if attributes.has_key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.has_key?(:'debited_at')
        self.debited_at = attributes[:'debited_at']
      end

      if attributes.has_key?(:'pos')
        self.pos = attributes[:'pos']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      pos_validator = EnumAttributeValidator.new('String', ['irl', 'internet'])
      return false unless pos_validator.valid?(@pos)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pos Object to be assigned
    def pos=(pos)
      validator = EnumAttributeValidator.new('String', ['irl', 'internet'])
      unless validator.valid?(pos)
        fail ArgumentError, 'invalid value for "pos", must be one of #{validator.allowable_values}.'
      end
      @pos = pos
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          mastercard_merchant_id == o.mastercard_merchant_id &&
          location == o.location &&
          merchant_category_code == o.merchant_category_code &&
          token == o.token &&
          transaction_link == o.transaction_link &&
          transaction_status == o.transaction_status &&
          transaction_type == o.transaction_type &&
          debited_at == o.debited_at &&
          pos == o.pos
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [mastercard_merchant_id, location, merchant_category_code, token, transaction_link, transaction_status, transaction_type, debited_at, pos].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Mooncard.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
