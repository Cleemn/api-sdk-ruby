=begin
#Mooncard API

#Access Mooncard data from anywhere

OpenAPI spec version: 3.0.0
Contact: hello@mooncard.co
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.10

=end

require 'uri'

module SwaggerClient
  class AnalyticCodesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_api_v3_analytic_codes_id(id, opts = {})
      delete_api_v3_analytic_codes_id_with_http_info(id, opts)
      nil
    end

    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_api_v3_analytic_codes_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticCodesApi.delete_api_v3_analytic_codes_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AnalyticCodesApi.delete_api_v3_analytic_codes_id"
      end
      # resource path
      local_var_path = '/api/v3/analytic_codes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticCodesApi#delete_api_v3_analytic_codes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch. (default to 1)
    # @option opts [Integer] :per_page Number of results to return per page.
    # @option opts [String] :analytic_code_search_code_eq code &#x3D; ?
    # @option opts [String] :analytic_code_search_name_eq name &#x3D; ?
    # @option opts [String] :analytic_code_search_order_by Select which field you want to order the results by
    # @option opts [String] :analytic_code_search_order Select whether the results should be sorted in ascending or descending order
    # @return [Array<AnalyticCode>]
    def get_api_v3_analytic_codes(opts = {})
      data, _status_code, _headers = get_api_v3_analytic_codes_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page Page of results to fetch.
    # @option opts [Integer] :per_page Number of results to return per page.
    # @option opts [String] :analytic_code_search_code_eq code &#x3D; ?
    # @option opts [String] :analytic_code_search_name_eq name &#x3D; ?
    # @option opts [String] :analytic_code_search_order_by Select which field you want to order the results by
    # @option opts [String] :analytic_code_search_order Select whether the results should be sorted in ascending or descending order
    # @return [Array<(Array<AnalyticCode>, Fixnum, Hash)>] Array<AnalyticCode> data, response status code and response headers
    def get_api_v3_analytic_codes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticCodesApi.get_api_v3_analytic_codes ...'
      end
      if @api_client.config.client_side_validation && opts[:'analytic_code_search_order_by'] && !['created_at'].include?(opts[:'analytic_code_search_order_by'])
        fail ArgumentError, 'invalid value for "analytic_code_search_order_by", must be one of created_at'
      end
      if @api_client.config.client_side_validation && opts[:'analytic_code_search_order'] && !['asc', 'desc'].include?(opts[:'analytic_code_search_order'])
        fail ArgumentError, 'invalid value for "analytic_code_search_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/api/v3/analytic_codes'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per_page'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'analytic_code_search[code_eq]'] = opts[:'analytic_code_search_code_eq'] if !opts[:'analytic_code_search_code_eq'].nil?
      query_params[:'analytic_code_search[name_eq]'] = opts[:'analytic_code_search_name_eq'] if !opts[:'analytic_code_search_name_eq'].nil?
      query_params[:'analytic_code_search[order_by]'] = opts[:'analytic_code_search_order_by'] if !opts[:'analytic_code_search_order_by'].nil?
      query_params[:'analytic_code_search[order]'] = opts[:'analytic_code_search_order'] if !opts[:'analytic_code_search_order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AnalyticCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticCodesApi#get_api_v3_analytic_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [AnalyticCode]
    def get_api_v3_analytic_codes_id(id, opts = {})
      data, _status_code, _headers = get_api_v3_analytic_codes_id_with_http_info(id, opts)
      data
    end

    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticCode, Fixnum, Hash)>] AnalyticCode data, response status code and response headers
    def get_api_v3_analytic_codes_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticCodesApi.get_api_v3_analytic_codes_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AnalyticCodesApi.get_api_v3_analytic_codes_id"
      end
      # resource path
      local_var_path = '/api/v3/analytic_codes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticCodesApi#get_api_v3_analytic_codes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param analytic_code 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_api_v3_analytic_codes(analytic_code, opts = {})
      post_api_v3_analytic_codes_with_http_info(analytic_code, opts)
      nil
    end

    # @param analytic_code 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_api_v3_analytic_codes_with_http_info(analytic_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticCodesApi.post_api_v3_analytic_codes ...'
      end
      # verify the required parameter 'analytic_code' is set
      if @api_client.config.client_side_validation && analytic_code.nil?
        fail ArgumentError, "Missing the required parameter 'analytic_code' when calling AnalyticCodesApi.post_api_v3_analytic_codes"
      end
      # resource path
      local_var_path = '/api/v3/analytic_codes'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(analytic_code)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticCodesApi#post_api_v3_analytic_codes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param id 
    # @param analytic_codes_body 
    # @param [Hash] opts the optional parameters
    # @return [AnalyticCode]
    def put_api_v3_analytic_codes_id(id, analytic_codes_body, opts = {})
      data, _status_code, _headers = put_api_v3_analytic_codes_id_with_http_info(id, analytic_codes_body, opts)
      data
    end

    # @param id 
    # @param analytic_codes_body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticCode, Fixnum, Hash)>] AnalyticCode data, response status code and response headers
    def put_api_v3_analytic_codes_id_with_http_info(id, analytic_codes_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticCodesApi.put_api_v3_analytic_codes_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AnalyticCodesApi.put_api_v3_analytic_codes_id"
      end
      # verify the required parameter 'analytic_codes_body' is set
      if @api_client.config.client_side_validation && analytic_codes_body.nil?
        fail ArgumentError, "Missing the required parameter 'analytic_codes_body' when calling AnalyticCodesApi.put_api_v3_analytic_codes_id"
      end
      # resource path
      local_var_path = '/api/v3/analytic_codes/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(analytic_codes_body)
      auth_names = ['oauth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticCodesApi#put_api_v3_analytic_codes_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
