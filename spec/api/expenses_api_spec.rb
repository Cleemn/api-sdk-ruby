=begin
#Mooncard API

#Access Mooncard data from anywhere

OpenAPI spec version: 3.0.0
Contact: hello@mooncard.co
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'spec_helper'
require 'json'

# Unit tests for Mooncard::ExpensesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ExpensesApi' do
  before do
    # run before each test
    @instance = Mooncard::ExpensesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ExpensesApi' do
    it 'should create an instance of ExpensesApi' do
      expect(@instance).to be_instance_of(Mooncard::ExpensesApi)
    end
  end

  # unit tests for find
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [Expense]
  describe 'find test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Page of results to fetch.
  # @option opts [Integer] :per_page Number of results to return per page.
  # @option opts [String] :expense_search_user_profile_id_eq user_profile_id &#x3D; ?
  # @option opts [String] :expense_search_business_code_id_eq business_code_id &#x3D; ?
  # @option opts [String] :expense_search_supplier_id_eq supplier_id &#x3D; ?
  # @option opts [String] :expense_search_rebill_id_eq rebill_id &#x3D; ?
  # @option opts [String] :expense_search_department_id_eq department_id &#x3D; ?
  # @option opts [String] :expense_search_expense_category_id_eq expense_category_id &#x3D; ?
  # @option opts [String] :expense_search_expense_report_id_eq expense_report_id &#x3D; ?
  # @option opts [String] :expense_search_title_cont title LIKE %?%
  # @option opts [String] :expense_search_currency_in currency IN (?)
  # @option opts [String] :expense_search_source_type_eq source_type &#x3D; IN (?)
  # @option opts [String] :expense_search_accountability_in accountability &#x3D; IN (?)
  # @option opts [String] :expense_search_receipt_status_in receipt_status &#x3D; IN (?)
  # @option opts [String] :expense_search_step_in step &#x3D; IN (?)
  # @option opts [String] :expense_search_at_gteq at &gt;&#x3D; ?
  # @option opts [String] :expense_search_at_lteq at &lt;&#x3D; ?
  # @option opts [String] :expense_search_order_by Select which field you want to order the results by
  # @option opts [String] :expense_search_order Select whether the results should be sorted in ascending or descending order
  # @return [Array<Expense>]
  describe 'list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
